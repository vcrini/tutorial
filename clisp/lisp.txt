vcrini@gdr:~$ clisp
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49.92 (2018-02-18) <http://clisp.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992-1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2018

Type :h and hit Enter for context help.

[1]> (if (= (+ 1 2) 3)
You are in the top-level Read-Eval-Print loop.
Help (abbreviated :h) = this list
Use the usual editing capabilities.
(quit) or (exit) leaves CLISP.
  'yes
  'none)
YES
[2]> (if (= (+ 1 3) 3)
  'yes
  'none)
NONE
[3]> (if '(1)
         'la-lista-ha-roba-dentro
         'la-lista-non-ha-niente)
LA-LISTA-HA-ROBA-DENTRO
[4]> (if '()
         'la-lista-ha-roba-dentro
         'la-lista-non-ha-niente)
LA-LISTA-NON-HA-NIENTE
[5]> (if (oddp 3)
         'dispari
         'pari)
DISPARI
[6]> (if (oddp 2)
         'dispari
         'pari)
PARI
[7]> (if (oddp 0)
         'dispari
         'pari)
PARI
[8]> (if (oddp 3)
         'dispari
         (/ 1 0))
DISPARI
[9]> (if (oddp 2)
         'dispari
         (/ 1 0))

*** - /: division by zero
The following restarts are available:
ABORT          :R1      Abort main loop
Break 1 [10]> :R1
[11]> (defvar *numero-dispari* nil)
*NUMERO-DISPARI*
[12]> (if (oddp 5)
          (progn (setf *numero-dispari* t)
                 'numero-dispari)
          'numero-pari)
NUMERO-DISPARI
[13]> *numero-dispari*
T
[14]> (defvar *numero-dispari* nil)
*NUMERO-DISPARI*
[15]> *numero-dispari*
T
[16]> (if (oddp 4)
          (progn (setf *numero-dispari* t)
                 'numero-dispari)
          'numero-pari)
NUMERO-PARI
[17]> (quit)
Bye.
vcrini@gdr:~$ clisp
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49.92 (2018-02-18) <http://clisp.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992-1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2018

Type :h and hit Enter for context help.

[1]> (defvar *dispari* nul)

*** - UNLESS: variable NUL has no value
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead of NUL.
STORE-VALUE    :R2      Input a new value for NUL.
ABORT          :R3      Abort main loop
Break 1 [2]> :R1
Use instead of NUL> nil
*DISPARI*
[3]> *dispari*
NIL
[4]> (when (oddp 5)
           (setf *dispari* t)
           'dispari-è-il-numero)
DISPARI-È-IL-NUMERO
[5]> (when (oddp 0)
           (setf *dispari* t)
           'dispari-è-il-numero)
NIL
[6]> *dispari*
T
[7]> (unless (oddp 2)
           (setf *dispari* nil)
           'pari-è-il-numero)
PARI-È-IL-NUMERO
[8]> *dispari*
NIL
[9]> (defvar *arci-nemico* nil)
*ARCI-NEMICO*
[10]> (defun mangia-pudding (persona)
        (cond ((eq persona 'enrico) (setf *arci-nemico* 'stupido-alieno-lisp) '(maledetto-alieno-lisp-hai-mangiato-il-mio-pudding))
               ((eq persona 'giovanni) (setf *arci-nemico* 'inutile-vecchio-giovanni) '(Io spero che tu schianti Giovanni))
You are in the top-level Read-Eval-Print loop.
Help (abbreviated :h) = this list
Use the usual editing capabilities.
(quit) or (exit) leaves CLISP.
               (t '(perchè mangi il mio pudding straniero?))))
MANGIA-PUDDING
[11]> (mangia-pudding 'giovanni)
(IO SPERO CHE TU SCHIANTI GIOVANNI)
[12]> *arci-nemico*
INUTILE-VECCHIO-GIOVANNI
[13]> (mangia-pudding 'enrico)
(MALEDETTO-ALIENO-LISP-HAI-MANGIATO-IL-MIO-PUDDING)
[14]> *arci-nemico*
STUPIDO-ALIENO-LISP
[15]> (mangia-pudding 'Valerio)
(PERCHÈ MANGI IL MIO PUDDING STRANIERO?)
[16]> *arci-nemico*
STUPIDO-ALIENO-LISP
[17]> (defun mangia-pudding (persona)
        (case persona ((enrico) (setf *arci-nemico* 'stupido-alieno-lisp) '(maledetto-alieno-lisp-hai-mangiato-il-mio-pudding))
               ((giovanni) (setf *arci-nemico* 'inutile-vecchio-giovanni) '(Io spero che tu schianti Giovanni))
               (otherwise '(perchè mangi il mio pudding straniero?))))
MANGIA-PUDDING
[18]> (mangia-pudding 'Valerio)
(PERCHÈ MANGI IL MIO PUDDING STRANIERO?)
[19]> (mangia-pudding 'enrico)
(MALEDETTO-ALIENO-LISP-HAI-MANGIATO-IL-MIO-PUDDING)
[20]> (mangia-pudding 'giovanni)
(IO SPERO CHE TU SCHIANTI GIOVANNI)
[21]> (and (oddp 5) (oddp 3) (oddp 1))
T
[22]> (and (oddp 5) (oddp 2) (oddp 1))
NIL
[23]> (or (oddp 5) (oddp 2) (oddp 1))
T
[24]> (setf *dispari* nil)
NIL
[25]> (or (oddp 0) (setf *pari* t))
T
[26]> *pari*
T
[27]> (if (member 1 '(2 4 1 5))
          '1-nella-lista
          '1-non-nella-lista)
1-NELLA-LISTA
[28]> (member 1 '(2 4 1 5))
(1 5)
[29]> (member 2 '(2 4 1 5))
(2 4 1 5)
[30]> (member 4 '(2 4 1 5))
(4 1 5)
[31]> (car (member 4 '(2 4 1 5)))
4
[32]> (car (member 5 '(2 4 1 5)))
5
[33]> (member 5 '(2 4 1 5))
(5)
[34]> (member nil '(3 4 nil 5))
(NIL 5)
[35]> (member nil '(3 4 5 nil))
(NIL)
[36]> (if (member nil '(3 4 5 nil)) 'trovato 'non-trovato))
TROVATO
[37]>
*** - READ from #<INPUT CONCATENATED-STREAM #<INPUT STRING-INPUT-STREAM> #<IO TERMINAL-STREAM>>: an object cannot start with #\)
The following restarts are available:
ABORT          :R1      Abort main loop
Break 1 [38]> :R1
[39]> (if (member nil '(3 4 5 nil)) 'trovato 'non-trovato)
TROVATO
[40]> (if ((nil)) 'trovato 'non-trovato)

*** - EVAL: (NIL) is not a function name; try using a symbol instead
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [41]> (if (('nil)) 'trovato 'non-trovato)

*** - EVAL: ('NIL) is not a function name; try using a symbol instead
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort debug loop
ABORT          :R3      Abort main loop
Break 2 [42]> :R3
[43]> (if (('nil)) 'trovato 'non-trovato)

*** - EVAL: ('NIL) is not a function name; try using a symbol instead
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [44]> :R1
Use instead> (if (nil) 'trovato 'non-trovato)

*** - EVAL: undefined function NIL
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead of (FDEFINITION 'NIL).
RETRY          :R2      Retry
STORE-VALUE    :R3      Input a new value for (FDEFINITION 'NIL).
ABORT          :R4      Abort debug loop
ABORT          :R5      Abort main loop
Break 2 [45]> (if '(nil) 'trovato 'non-trovato)
TROVATO
Break 2 [45]> (if '() 'trovato 'non-trovato)
NON-TROVATO
Break 2 [45]> (if '(nil) 'trovato 'non-trovato)
TROVATO
Break 2 [45]> (if () 'trovato 'non-trovato)
NON-TROVATO
Break 2 [45]> (if (nil) 'trovato 'non-trovato)

*** - EVAL: undefined function NIL
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead of (FDEFINITION 'NIL).
RETRY          :R2      Retry
STORE-VALUE    :R3      Input a new value for (FDEFINITION 'NIL).
ABORT          :R4      Abort debug loop
ABORT          :R5      Abort debug loop
ABORT          :R6      Abort main loop
Break 3 [46]> :R6
[47]> (if '() 'trovato 'non-trovato)
NON-TROVATO
[48]> (if () 'trovato 'non-trovato)
NON-TROVATO
[49]> (if 'nil 'trovato 'non-trovato)
NON-TROVATO
[50]> (if nil 'trovato 'non-trovato)
NON-TROVATO
[51]> (if ('nil) 'trovato 'non-trovato)

*** - EVAL: 'NIL is not a function name; try using a symbol instead
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [52]> R3

*** - SYSTEM::READ-EVAL-PRINT: variable R3 has no value
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead of R3.
STORE-VALUE    :R2      Input a new value for R3.
ABORT          :R3      Abort debug loop
ABORT          :R4      Abort main loop
Break 2 [53]> :R3
Break 1 [52]> (if '(nil) 'trovato 'non-trovato)
TROVATO
Break 1 [52]> (if nil 'trovato 'non-trovato)
NON-TROVATO
Break 1 [52]> (if 'nil 'trovato 'non-trovato)
NON-TROVATO
Break 1 [52]> (member nil '(3 4 5 nil))
(NIL)
Break 1 [52]> (find-if #'oddp '(2 4 5 6))
5
Break 1 [52]> (find-if '(5 6))

*** - EVAL: too few arguments given to FIND-IF: (FIND-IF '(5 6))
The following restarts are available:
ABORT          :R1      Abort debug loop
ABORT          :R2      Abort main loop
Break 2 [54]> R3

*** - SYSTEM::READ-EVAL-PRINT: variable R3 has no value
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead of R3.
STORE-VALUE    :R2      Input a new value for R3.
ABORT          :R3      Abort debug loop
ABORT          :R4      Abort debug loop
ABORT          :R5      Abort main loop
Break 3 [55]> :R3
Break 2 [54]> (find-if (5 6))

*** - EVAL: 5 is not a function name; try using a symbol instead
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort debug loop
ABORT          :R3      Abort debug loop
ABORT          :R4      Abort main loop
Break 3 [56]> :R3
Break 1 [52]> (find-if #'oddp '(2 4 8 6))
NIL
Break 1 [52]> (find-if #'oddp '(2 4 8 6 1))
1
Break 1 [52]> (null '(2 nil 3))
NIL
Break 1 [52]> (null '(2 1 3))
NIL
Break 1 [52]> (+ 1 1)
2
Break 1 [52]> (+ 100 100)
200
Break 1 [52]> (+ 1037893756983764598732645876387453860 10012344554441111111222223333344444555555666666777778888800000000000000000)
10012344554441111111222223333344444556593560423761543487532645876387453860
Break 1 [52]> (- 14 8)
6
Break 1 [52]> (null '(1 nil))
NIL
Break 1 [52]> (null (1 nil))

*** - EVAL: 1 is not a function name; try using a symbol instead
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort debug loop
ABORT          :R3      Abort main loop
Break 2 [57]> :R3
[58]> (null '(1 nil))
NIL
[59]> (null '(1 2))
NIL
[60]> (nul 1)

*** - EVAL: undefined function NUL
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead of (FDEFINITION 'NUL).
RETRY          :R2      Retry
STORE-VALUE    :R3      Input a new value for (FDEFINITION 'NUL).
ABORT          :R4      Abort main loop
Break 1 [61]> :R1
Use instead of (FDEFINITION 'NUL)>

*** - Ctrl-C: User break
The following restarts are available:
ABORT          :R1      Abort debug loop
ABORT          :R2      Abort main loop
Break 2 [62]> :R1
Break 1 [61]> :R2

*** - EVAL: undefined function NUL
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead of (FDEFINITION 'NUL).
RETRY          :R2      Retry
STORE-VALUE    :R3      Input a new value for (FDEFINITION 'NUL).
ABORT          :R4      Abort main loop
Break 1 [63]> :R4
[64]> (null '(1))
NIL
[65]> (null '(nil))
NIL
[66]> (null '())
T
[67]> (null '(1))
NIL
[68]> (null 'nil)
T
[69]> (null '())
T
[70]> (find-if #'null '(2 4 nil 6))
NIL
[71]> (find-if #'null '(2 4 6))
NIL
[72]> (find-if #'null '(nil))
NIL
[73]> (find-if #'null '())
NIL
[74]> (setf *pippo 'ciao)
CIAO
[75]> *pippo
CIAO
[76]> (eq *pippo 'ciao)
T
[77]> (eq *pippo 'ciaone)
NIL
[78]> (eq 'mela 'mela)
T
[79]> (equal 'mela 'mela)
T
[80]> (eq (list 1 2 3) (list 1 2 3))
NIL
[81]> (equal (list 1 2 3) (list 1 2 3))
T
[82]>
